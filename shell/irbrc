# frozen_string_literal: true

require 'irb'
require 'irb/completion'
require 'rubygems'

IRB.conf[:AUTO_INDENT] = true
IRB.conf[:PROMPT_MODE] = :SIMPLE
IRB.conf[:SAVE_HISTORY] = 10_000
IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb-history"

class Class
  public :include

  # Show only this class class methods
  def class_methods
    (methods - instance_methods - Object.methods).sort
  end

  # Show instance and class methods
  def defined_methods
    methods = {}

    methods[:instance] = instance_methods(false)
    methods[:class] = class_methods

    methods
  end
end

class Object
  # Show local methods from the object's class
  def defined_methods
    (methods - Object.instance_methods).sort
  end

  # Open a particular method in an editor
  def ocode(method_name)
    file, line = method(method_name).source_location

    if file && line
      # or code -g
      `code -g '#{file}:#{line}'`
    else
      "'#{method_name}' not found."
    end
  end
end

if ENV['RAILS_ENV']
  rails_env = ENV['RAILS_ENV']
  rails_root = File.basename(Dir.pwd)
  prompt = "#{rails_root}[#{rails_env.sub('production', 'prod').sub('development', 'dev')}]"
  IRB.conf[:PROMPT] ||= {}

  IRB.conf[:PROMPT][:RAILS] = {
    PROMPT_I: "#{prompt}>> ",
    PROMPT_S: "#{prompt}* ",
    PROMPT_C: "#{prompt}? ",
    RETURN: "=> %s\n"
  }

  IRB.conf[:PROMPT_MODE] = :RAILS

  # show datbase query's
  def show_sql
    ActiveRecord::Base.logger = ActiveSupport::Logger.new(STDOUT)
    ActiveRecord::Base.connection_pool.clear_reloadable_connections!
    nil
  end

  if rails_root == 'roots'
    def pgsync(command)
      ENV['PGSYNC_FROM_DATABASE'] ||= `heroku config:get DATABASE_URL -a #{ENV['HEROKU_APP'] || 'budgetcam-roots-staging'}`
      ENV['PGSYNC_TO_DATABASE'] ||= ENV['DATABASE_URL'] || "postgres://localhost:#{ENV['DB_PORT']}/#{ENV['DB_NAME']}"

      env_variables = "PGSYNC_FROM_DATABASE=#{ENV['PGSYNC_FROM_DATABASE']} "\
                      "PGSYNC_TO_DATABASE=#{ENV['PGSYNC_TO_DATABASE']}"
      pgsync_command = "#{env_variables} pgsync #{command}"

      puts `#{pgsync_command}`
    end
  end

  if rails_root == 'budgetcam-webshop'
    def enter
      Time.zone = 'Amsterdam'
      company = Company.find(1)
      Thread.current[:company] = company
      nil
    end
  end

  if rails_root == 'roots' || rails_root == 'budgetcam-webshop'
    def me
      User.find(59_670)
    end

    # enter
  end

  def diff_active_record(*args)
    if args[0].class.to_s.include? 'ActiveRecord'
      records = args[0].to_a
      records.each_index.map do |i|
        diff_active_record(records[i], records[i + 1]) if (i + 1) < records.length
      end.compact
    else
      fields = (args[0].attributes.to_a - args[1].attributes.to_a).map(&:first)
      Hash[fields.map { |field| [field, [args[0].send(field), args[1].send(field)]] }]
    end
  end

end

### USEFUL ALIASES
alias q exit
